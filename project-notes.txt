Plan, Code, and Deploy a Startup in 2 Hours [Full-Stack JavaScript Tutorial]
By Code Drip and freeCodeCamp.org
URL: https://www.youtube.com/watch?v=lauywdXKEXI

1) Plan and Create Front-End- 0:00
    The front-end will utilize the React Framework.
    Run this script at the root directory:
        npm install create-react-app -g
    Then run this script to create the cient:
        create-react-app client
    Within the client directory add material-ui:
        npm install @material-ui/core

    Inside the component API section of the material-ui docs, copy the import for 
    typography and add it to a component of jobs.

    The set-up is: App.js will hold the application/use state while calling the hooks, 
    jobs.js will hold the component tree plus the render styling.


2) Create Front-End Part 2 with JSON Test- 5:15

3) Create cron Worker- 10:00
    Create a package JSON at root that will be accessible from all folders:
        npm init -y
    Add the cron dependency to run tasks on a timer:
        npm i cron
    Test to see if the cron worker functions properly when the Usage (basic cron usage)
    is added to the worker index:
        node worker/index.js
    The console message should show every second.


4) Iterate Through the Job Pages- 15:34
    Add the node fetch library from root:
        npm i node-fetch
    Check the number of pages within the fetch-github.js file:
        node worker/tasks/fetch-github.js

5) Loop Through the Jobs- 19:53

6) Loop Through the Jobs Every Minute- 25:00
Check to see if the the fetchGithub() function runs every minute within 
worker index.js:
    node worker/index.js

7) Storage Solution, Redis- 28:32
    The storage solution within this project is redis. With the Windows 10
    distro, the solution is to add redis through the Windows Subsystem for
    Linux(WSL). The instructions for install is at:
        https://redislabs.com/blog/redis-on-windows-10/

    Connect to the client with:
        redis-client
    Flush data in RAM from the cient with:
        FLUSHALL

    To use redis within node, add redis through npm:
        npm install redis

    Once the redis is setup within the fetch-github worker, within the CLI of 
    redis type the following upon running the worker:
        get github


8) Filter Algorithm- 39:00

9) index.js Express API- 46:45
    Install the Express dependency:
        npm i express

    Within the index file for the api, to see the res works for jobs, in the terminal
    type:
        curl http://localhost:3001/jobs
    NOTE: The server needs to be running in node.js.


10) Call API From the Client Front-end- 50:50
    NOTE within the index.js api of response for the header to fetch at the front-end.

11) Render the Jobs to the Front-end- 58:10

12) Style CSS, Add Material-UI/Java Objects to Jobs.js- 59:20